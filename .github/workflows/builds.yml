name: Build tests

on:
  release:

  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      build_release:
        description: 'Build Release binaries'
        required: false
        type: boolean

# Set the build type here
env:
  B_BUILD_TYPE: ${{ (inputs.build_release || github.event_name == 'release') && 'Release' || 'Debug' }}
  DEBIAN_FRONTEND: noninteractive

jobs:
  linux-build:
    name: ${{ matrix.name }}
    runs-on: ubuntu-22.04-arm
    container: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
       include:
         - name: ubuntu-22-04-arm64
           os: "ubuntu-22.04-arm"
           cc: "gcc"
           cxx: "g++"
           wayland: none
           arch: "arm64"
    steps:

      - if: matrix.os == 'ubuntu:20.04'
        name: Add repositories with newer cmake
        run: |
          apt-get update -y
          apt-get install -y gpg wget
          # InputLeap requires at least CMake 3.21.
          # This mirrors instructions at https://apt.kitware.com
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
            | gpg --dearmor - \
            > /usr/share/keyrings/kitware-archive-keyring.gpg
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' \
            > /etc/apt/sources.list.d/kitware.list

      - name: Update and install packages
        run: |
          apt-get update -y
          apt-get dist-upgrade -y
          apt-get install -y \
                  cmake \
                  g++ \
                  clang \
                  git \
                  libavahi-compat-libdnssd-dev \
                  libgtest-dev \
                  libgl-dev \
                  libgmock-dev \
                  libice-dev \
                  libsm-dev \
                  libssl-dev \
                  libxinerama-dev \
                  libxrandr-dev \
                  libxtst-dev \
                  libxkbcommon-dev \
                  libglib2.0-dev \
                  ninja-build \
                  qtdeclarative5-dev \
                  qttools5-dev

      - if: env.B_BUILD_TYPE == 'Release'
        name: Install release installer build packages
        run: |
          apt-get install -y \
                  debhelper \
                  devscripts \
                  xvfb

      - if: matrix.os != 'ubuntu:20.04'
        name: Install Qt6 packages
        run: |
          apt-get install -y \
                  qt6-base-dev \
                  qt6-l10n-tools \
                  qt6-tools-dev-tools \
                  qt6-tools-dev

      - if: matrix.wayland == 'latest'
        name: Install libei and libportal pre-reqs
        run: |
          apt-get install -y \
                  ca-certificates \
                  dbus \
                  gettext \
                  git \
                  libgirepository1.0-dev \
                  libglib2.0 \
                  libgtk-3-dev \
                  libprotobuf-c-dev \
                  libsystemd-dev \
                  meson \
                  protobuf-c-compiler \
                  protobuf-compiler \
                  python3-attr \
                  python3-dbusmock \
                  python3-jinja2 \
                  python3-pip \
                  python3-pytest \
                  python3-jinja2 \
                  valac

      - if: matrix.wayland == 'dist'
        name: Install libei and libportal distribution packages
        run: |
          apt-get install -y \
                libei-dev \
                libportal-dev

      # Code checkout steps
      - name: Checkout input-leap
        uses: actions/checkout@v4
        with:
          path: input-leap
          submodules: recursive
          set-safe-directory: ${{ github.workspace }}

      - if: matrix.wayland == 'latest'
        name: Get libei v1.3.0 from freedesktop
        # Manual checkout of libinput/libei ref 1.3.0 from https://gitlab.freedesktop.org
        # because actions/checkout does not support gitlab
        run: |
          git clone --depth=1 --branch="$ref" --recurse-submodules -- \
            "https://gitlab.freedesktop.org/libinput/libei" libei
        env:
          ref: 1.3.0

      - if: matrix.wayland == 'latest'
        name: Get libportal from upstream
        uses: actions/checkout@v4
        with:
          repository: flatpak/libportal
          ref: main
          path: libportal

      - if: matrix.wayland == 'latest'
        name: build libei from git tag
        run: |
            meson setup -Dprefix=/usr -Dtests=disabled -Dliboeffis=disabled -Ddocumentation=[] libei _libei_builddir
            ninja -C _libei_builddir install

      - if: matrix.wayland == 'latest'
        name: build libportal
        run: |
            meson setup --prefix=/usr -Dbackend-gtk3=enabled -Ddocs=false libportal _libportal_builddir
            ninja -C _libportal_builddir install

      - name: Run build
        if: env.B_BUILD_TYPE != 'Release'
        run: |
          if [ "${{ env.B_BUILD_TYPE }}" = "Release" ]; then
            VERSION_DESC=release
          else
            VERSION_DESC=$(git -C input-leap log --pretty=format:'git-%cs-%h' -1)
          fi
          cmake -DCMAKE_BUILD_TYPE="${B_BUILD_TYPE}" -S input-leap -B build \
                -DQT_DEFAULT_MAJOR_VERSION=${{ (matrix.os == 'ubuntu:20.04') && '5' || '6' }} \
                -DCMAKE_CXX_FLAGS:STRING="-Wall -Wextra -Wno-unused-parameter" \
                -DCMAKE_CXX_FLAGS_DEBUG:STRING="-g -Werror" \
                -DCMAKE_UNITY_BUILD=1 \
                -DINPUTLEAP_BUILD_LIBEI:BOOL=${{ (matrix.wayland != 'none') && '1' || '0' }} \
                -DINPUTLEAP_BUILD_GULRAK_FILESYSTEM=${{ (matrix.os == 'ubuntu:20.04') && '1' || '0' }} \
                -DINPUTLEAP_VERSION_DESC="$VERSION_DESC" \
                -DCMAKE_INSTALL_PREFIX=input-leap-${{ matrix.name }}
          cmake --build build --parallel --target install
        env:
            VERBOSE: 1
            CC: ${{ matrix.cc }}
            CXX: ${{ matrix.cxx }}

      - name: Run the tests
        if: env.B_BUILD_TYPE != 'Release'
        run: |
            ctest --test-dir build --verbose

      - name: Create Artifacts
        if: env.B_BUILD_TYPE != 'Release'
        run: tar -cf input-leap-${{matrix.name}}.tar.gz input-leap-${{matrix.name}}

      - name: Upload Artifacts
        if: env.B_BUILD_TYPE != 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: input-leap-${{matrix.name}}
          path: input-leap-${{matrix.name}}.tar.gz
          if-no-files-found: error

      - name: Build Debian package
        if: env.B_BUILD_TYPE == 'Release'
        run: |
          cd input-leap
          cp -r dist/debian debian
          if [ "${{ matrix.wayland }}" = "dist" ]; then
            sed -i -e 's/-DINPUTLEAP_BUILD_LIBEI=0/-DINPUTLEAP_BUILD_LIBEI=1/g' debian/rules
          fi
          if [ "${{ matrix.name }}" = "ubuntu-20-04" ]; then
            sed -i -e 's/QT_DEFAULT_MAJOR_VERSION=6/QT_DEFAULT_MAJOR_VERSION=5/g' debian/rules
          fi
          if [ "${{ env.B_BUILD_TYPE }}" = "Release" ]; then
            sed -i -e 's/INPUTLEAP_VERSION_DESC=git/INPUTLEAP_VERSION_DESC=release/g' debian/rules
          fi

          debuild -us -uc

      - name: Upload Artifacts
        if: env.B_BUILD_TYPE == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: input-leap-deb-${{matrix.name}}
          path: input-leap_*.deb
          if-no-files-found: error

  
